[{"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\index.js":"1","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\reportWebVitals.js":"2","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\App.js":"3","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\navigationBar.jsx":"4","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\homepage.jsx":"5","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\myCharacter.jsx":"6","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\control.jsx":"7","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\OtherCharacters.jsx":"8","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Actions.jsx":"9","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\config.js":"10","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\NewAction.jsx":"11","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedAction.jsx":"12","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ActionList.jsx":"13","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyCharacter.jsx":"14","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\AddAsset.jsx":"15","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyMemory.jsx":"16","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\ControlTerminal.jsx":"17","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\Registration.jsx":"18","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedProject.jsx":"19","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\store.js":"20","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\configureStore.js":"21","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\reducer.js":"22","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\api.js":"23","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\toast.js":"24","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\playerActions.js":"25","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\characters.js":"26","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\auth.js":"27","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\api.js":"28","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\gamestate.js":"29","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\socket.js":"30","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Login.jsx":"31","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\assets.js":"32","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\notFound.jsx":"33","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\loading.jsx":"34","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\initUpdate.js":"35"},{"size":694,"mtime":1612519622583,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":3792,"mtime":1614643208397,"results":"39","hashOfConfig":"37"},{"size":3310,"mtime":1615004618854,"results":"40","hashOfConfig":"37"},{"size":2490,"mtime":1615004642473,"results":"41","hashOfConfig":"37"},{"size":13748,"mtime":1613783735035,"results":"42","hashOfConfig":"37"},{"size":5556,"mtime":1614160515143,"results":"43","hashOfConfig":"37"},{"size":11258,"mtime":1614159424213,"results":"44","hashOfConfig":"37"},{"size":4093,"mtime":1613894805210,"results":"45","hashOfConfig":"37"},{"size":204,"mtime":1610142436997,"results":"46","hashOfConfig":"37"},{"size":5570,"mtime":1614645766641,"results":"47","hashOfConfig":"37"},{"size":12618,"mtime":1614660359226,"results":"48","hashOfConfig":"37"},{"size":2772,"mtime":1614563664745,"results":"49","hashOfConfig":"37"},{"size":5501,"mtime":1614159714932,"results":"50","hashOfConfig":"37"},{"size":3347,"mtime":1613783735035,"results":"51","hashOfConfig":"37"},{"size":5785,"mtime":1612746931439,"results":"52","hashOfConfig":"37"},{"size":14026,"mtime":1614982233795,"results":"53","hashOfConfig":"37"},{"size":4704,"mtime":1612687379751,"results":"54","hashOfConfig":"37"},{"size":6015,"mtime":1613783735035,"results":"55","hashOfConfig":"37"},{"size":151,"mtime":1613894077524,"results":"56","hashOfConfig":"37"},{"size":509,"mtime":1612428550891,"results":"57","hashOfConfig":"37"},{"size":474,"mtime":1612579400452,"results":"58","hashOfConfig":"37"},{"size":1018,"mtime":1613895448661,"results":"59","hashOfConfig":"37"},{"size":183,"mtime":1612428550980,"results":"60","hashOfConfig":"37"},{"size":4133,"mtime":1614901771183,"results":"61","hashOfConfig":"37"},{"size":2359,"mtime":1614381962786,"results":"62","hashOfConfig":"37"},{"size":2683,"mtime":1613943616264,"results":"63","hashOfConfig":"37"},{"size":238,"mtime":1612428550886,"results":"64","hashOfConfig":"37"},{"size":2037,"mtime":1614381912241,"results":"65","hashOfConfig":"37"},{"size":150,"mtime":1613943745302,"results":"66","hashOfConfig":"37"},{"size":3053,"mtime":1614584453601,"results":"67","hashOfConfig":"37"},{"size":2533,"mtime":1614381962786,"results":"68","hashOfConfig":"37"},{"size":1976,"mtime":1614297019439,"results":"69","hashOfConfig":"37"},{"size":13149,"mtime":1615004745816,"results":"70","hashOfConfig":"37"},{"size":1209,"mtime":1614646867867,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pxyo7",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\index.js",[],["149","150"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\reportWebVitals.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\App.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\navigationBar.jsx",["151"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\homepage.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\myCharacter.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\control.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\OtherCharacters.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Actions.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\config.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\NewAction.jsx",["152","153"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Button, Slider, Alert, InputPicker, FlexboxGrid, InputNumber, Loader } from 'rsuite';\r\nimport { gameServer } from '../config';\r\nimport { getMyCharacter, characterUpdated } from '../redux/entities/characters';\r\nimport { actionAdded } from '../redux/entities/playerActions';\r\nimport socket from '../socket';\r\nclass NewAction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        effort: 0,\r\n\t\t\t\tasset1: null,\r\n\t\t\t\tasset2: null,\r\n\t\t\t\tasset3: null,\r\n\t\t\t\tid: '',\r\n        description: '',\r\n\t\t\t\tintent: '',\t\r\n\t\t\t\tloading: false\t\r\n\t\t};\r\n\t}\r\n\t\r\n\thandleSubmit = async () => {\r\n\t\tthis.setState({ loading: true });\r\n\t\t// 1) make a new action\r\n\t\tconst action = {\r\n\t\t\teffort: this.state.effort,\r\n\t\t\tasset1: this.state.asset1,\r\n\t\t\tasset2: this.state.asset2,\r\n\t\t\tasset3: this.state.asset3,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tintent: this.state.intent,\r\n\t\t\tcreator: this.props.myCharacter._id,\r\n\t\t\tround: this.props.gamestate.round\r\n\t\t}\r\n\t\ttry{\r\n\t\t\t// const {data} = await axios.post(`${gameServer}api/actions`, { data: action });\r\n\t\t\t// console.log(data)\r\n\t\t\t// this.props.actionAdded(data);\r\n\t\t\t// Alert.success('Action Creation Submitted');\r\n\t\t\tsocket.emit('createActionRequest', action); // new Socket event\r\n\t\t\t\r\n\t\t\t// Locally update redux so that it reflects the effort being drained\r\n\t\t\tconst modifiedChar = {...this.props.myCharacter};\r\n\t\t\tmodifiedChar.effort -= this.state.effort;\r\n\t\t\tthis.props.updateCharacter(modifiedChar);\r\n\r\n\t\t\tthis.setState({effort: 0, asset1: '', asset2: '', asset3: '', description: '', intent: '', loading: false})\r\n\t\t\tthis.props.closeNew()\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t\tthis.setState({ loading: false });\r\n\t\t}\r\n\t}\r\n\t\r\n\trender() { \r\n\t\treturn ( \r\n\t\t\t<Modal overflow\r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.props.show} \r\n\t\t\tonHide={() => this.props.closeNew()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Submit a new action</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t{this.state.loading && <Loader backdrop content=\"loading...\" vertical />}\r\n\t\t\t\t\t<form>\r\n\t\t\t\t\t\t<FlexboxGrid> Description\r\n\t\t\t\t\t\t\t<textarea rows='6' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t<FlexboxGrid> What you would like to happen\r\n\t\t\t\t\t\t\t<textarea rows='6' value={this.state.intent} style={textStyle} onChange={(event)=> this.setState({intent: event.target.value})} ></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} align=\"middle\" colspan={6}>Effort\r\n\t\t\t\t\t\t\t\t<Slider graduated\r\n\t\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\t\tmax={this.props.myCharacter.effort}\r\n\t\t\t\t\t\t\t\tdefaultValue={0}\r\n\t\t\t\t\t\t\t\tprogress\r\n\t\t\t\t\t\t\t\tvalue={this.state.effort}\r\n\t\t\t\t\t\t\t\tonChange={(event)=> this.setState({effort: event})}>\r\n\t\t\t\t\t\t\t\t</Slider>\r\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: '20px', fontSize: '2em', }} >\r\n\t\t\t\t\t\t\t\t\tCurrent Effort Left: {this.props.myCharacter.effort}\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} colspan={2}>\r\n\t\t\t\t\t\t\t\t<InputNumber value={this.state.effort} max={this.props.myCharacter.effort} min={0} onChange={(event)=> this.setState({effort: event})}></InputNumber>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={4}>\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}> Assets/Traits\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 1\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset1: event})}/>\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 2\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset2: event})}/>\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 3\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset3: event})}/>\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n          <Button onClick={() => this.handleSubmit()} loading={this.state.loading} disabled={this.isDisabled()} appearance=\"primary\">\r\n            Submit\r\n          </Button>\r\n          <Button onClick={() => this.props.closeNew()} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t );\r\n\t}\r\n\r\n\tisDisabled () {\r\n\t\t if (this.state.description.length > 10 && this.state.intent.length > 10 && this.state.effort > 0) return false;\r\n\t\t else return true;\r\n\t}\r\n\r\n}\r\n\r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tgamestate: state.gamestate,\r\n\tactions: state.actions.list,\r\n  myCharacter: state.auth.user ? getMyCharacter(state): undefined\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tactionAdded: (data) => dispatch(actionAdded(data)),\r\n\tupdateCharacter: (data) => dispatch(characterUpdated(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewAction);\r\n","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedAction.jsx",["154","155"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Slider, Panel, FlexboxGrid, Content, Tag, TagGroup, ButtonGroup, Button, Modal, Alert, InputPicker, InputNumber, Divider, Progress } from 'rsuite';\r\nimport { gameServer } from '../config';\r\nimport { characterUpdated, getMyCharacter } from '../redux/entities/characters';\r\nimport { actionDeleted } from '../redux/entities/playerActions';\r\nimport socket from '../socket';\r\n/* To Whoever is reading this code. The whole \"action\" branch turned into a real mess, for which I am sorry. If you are looking into a better way of implementation, try the OtherCharacters page for lists. I hate forms.... */\r\nclass SelectedAction extends Component {\r\n\tstate = { \r\n\t\tedit: null, // used to open edit action popup\r\n\t\tresEdit: null,\t// used to open action result popup\r\n\t\tloading: false, //used for loading button \r\n\t\teffort: 1,\r\n\t\tasset1: '',\r\n\t\tasset2: '',\r\n\t\tasset3: '',\r\n\t\tid: '',\r\n\t\tdescription: '',\r\n\t\tintent: '',\t\r\n\t\tresult: this.props.action.result,\r\n\t\tdieResult: this.props.action.dieResult,\r\n\t\tstatus: ''\t\t\t\r\n\t }\r\n\r\n\t componentDidUpdate = (prevProps) => {\r\n\t\tif (this.props.action !== prevProps.action) {\r\n\t\t\tthis.setState({ \t\r\n\t\t\t\tresult: this.props.action.result,\r\n\t\t\t\tdieResult: this.props.action.dieResult, })\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\trender() { \r\n\t\tconst action = this.props.action;\r\n\t\treturn ( \r\n\t\t\t<Content style={{overflow: 'auto', height: 'calc(100vh - 100px)'}} >\r\n\t\t\t<FlexboxGrid >\r\n\t\t\t\t<FlexboxGrid.Item colspan={2} >\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t<FlexboxGrid.Item colspan={16} >\r\n\t\t\t\t\t<Panel shaded style={{padding: \"0px\", textAlign: \"left\", backgroundColor: \"#15181e\", whiteSpace: 'pre-line'}}>\r\n\t\t\t\t\t\t<p style={{ fontSize: '300', color: '#97969B', fontWeight: 'lighter',\twhiteSpace: 'nowrap',}}>\r\n\t\t\t\t\t\t\tCreated by: {action.creator.characterName}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tDescription\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.description}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tIntent\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.intent}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tEffort\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={{ textAlign: 'center', fontWeight: 'bolder', fontSize: 20 }} >{action.effort}</p>\r\n\t\t\t\t\t\t<Progress.Line percent={action.effort * 33 + 1} showInfo={false}>  </Progress.Line>\r\n\t\t\t\t\t\t<Divider>Assets/Traits</Divider>\r\n\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t\t{this.renderAsset(action.asset1)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t{this.renderAsset(action.asset2)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t{this.renderAsset(action.asset3)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</Panel>\r\n\t\t\t\t\t{(action.status.published || this.props.user.roles.some(el=> el === 'Control')) && \r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<Divider>Action Result</Divider>\r\n\t\t\t\t\t\t<Panel style={{textAlign: \"left\", backgroundColor: \"#61342e\",  whiteSpace: 'pre-line'}}>\r\n\t\t\t\t\t\t\t<p style={slimText}>Result</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.result}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Panel>\t\t\t\t\t\t\r\n\t\t\t\t\t</React.Fragment>}\r\n\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t<FlexboxGrid.Item colspan={1} />\r\n\t\t\t\t<FlexboxGrid.Item colspan={5}>\r\n\t\t\t\t\t<Panel style={{backgroundColor: '#15181e', border: '2px solid rgba(255, 255, 255, 0.12)', textAlign: 'center'}}>\r\n\t\t\t\t\t\t<TagGroup >Status:\r\n\t\t\t\t\t\t\t{action.status.draft && <Tag color='red'>Draft</Tag>}\r\n\t\t\t\t\t\t\t{!action.status.draft && !action.status.ready && !action.status.published && <Tag color='blue'>Awaiting Resolution</Tag>}\r\n\t\t\t\t\t\t\t{action.status.ready && <Tag color='violet'>Ready for Publishing</Tag>}\r\n\t\t\t\t\t\t\t{action.status.published && <Tag color='green'>Published</Tag>}\r\n\t\t\t\t\t\t</TagGroup>\r\n\t\t\t\t\t\t\t<ButtonGroup style={{marginTop: '5px' }} >\r\n\t\t\t\t\t\t\t\t<Button appearance={\"ghost\"} disabled={!action.status.draft} onClick={() => this.openEdit()} >Edit</Button>\r\n\t\t\t\t\t\t\t\t<Button color='red' appearance={\"ghost\"} disabled={!action.status.draft} onClick={() => this.deleteAction()}>Delete</Button>\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t</Panel>\r\n\t\t\t\t\t{this.props.user.roles.some(el=> el === 'Control') && \r\n\t\t\t\t\t\t<Panel header={\"Control Panel\"} style={{backgroundColor: '#61342e', border: '2px solid rgba(255, 255, 255, 0.12)', textAlign: 'center'}}>\r\n\t\t\t\t\t\t\t<ButtonGroup style={{marginTop: '5px', }} >\r\n\t\t\t\t\t\t\t\t<Button appearance={\"ghost\"} onClick={() => this.setState({ resEdit: true })}>Edit Result</Button>\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t</Panel>}\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t</FlexboxGrid>\t\r\n\r\n\t\t\t<Modal overflow \r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.state.edit} \r\n\t\t\tonHide={() => this.closeEdit()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Edit an Action</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<FlexboxGrid> Description\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<FlexboxGrid> What you would like to happen\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.intent} style={textStyle} onChange={(event)=> this.setState({intent: event.target.value})} ></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} align=\"middle\" colspan={6}>Effort\r\n\t\t\t\t\t\t\t<Slider graduated\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={this.props.myCharacter.effort + this.props.action.effort}\r\n\t\t\t\t\t\t\tdefaultValue={this.state.effort}\r\n\t\t\t\t\t\t\tprogress\r\n\t\t\t\t\t\t\tvalue={this.state.effort}\r\n\t\t\t\t\t\t\tonChange={(event)=> this.setState({effort: event})}>\r\n\t\t\t\t\t\t\t</Slider>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} colspan={2}>\r\n\t\t\t\t\t\t\t<InputNumber value={this.state.effort} max={this.props.myCharacter.effort + this.props.action.effort} min={0} onChange={(event)=> this.setState({effort: event})}></InputNumber>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item colspan={4}>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}> Assets/Traits\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset1} placeholder=\"Slot 1\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset1: event})}/>\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset2} placeholder=\"Slot 2\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset2: event})}/>\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset3} placeholder=\"Slot 3\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset3: event})}/>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n          <Button loading={this.state.loading} onClick={() => this.handleSubmit()} disabled={this.state.effort === 0} appearance=\"primary\">\r\n            Submit\r\n          </Button>\r\n          <Button onClick={() => this.closeEdit()} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n\t\t\t</Modal>\r\n\r\n\t\t\t<Modal overflow\r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.state.resEdit} \r\n\t\t\tonHide={() => this.closeResult()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Edit Action Result</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\r\n\t\t\t\t<p style={{ fontSize: '300', color: '#97969B', fontWeight: 'lighter',\twhiteSpace: 'nowrap',}}>\r\n\t\t\t\t\t\tCreated by: {action.creator.characterName}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{  fontSize: '0.966em', color: '#97969B', \tfontWeight: '300',}}>\r\n\t\t\t\t\t\tDescription\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{action.description}\t\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{ fontSize: '0.966em', color: '#97969B', \tfontWeight: '300', }}>\r\n\t\t\t\t\t\tIntent\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{action.intent}\t\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{ fontSize: '0.966em', color: '#97969B', \tfontWeight: '300',}}>\r\n\t\t\t\t\t\tEffort\r\n\t\t\t\t</p>\r\n\t\t\t\t<p style={{ fontWeight: 'bolder', fontSize: 20 }} >{action.effort}</p>\r\n\t\t\t\t<Divider></Divider>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<FlexboxGrid> Result:\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.result} style={textStyle} onChange={(event)=> this.setState({result: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid.Item colspan={6}>\r\n\t\t\t\t\t\t\t<b>Die Result</b>\r\n\t\t\t\t\t\t\t<textarea value={this.state.dieResult} style={textStyle} onChange={(event)=> this.setState({dieResult: event.target.value})}></textarea>\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={2}/>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={6}>\r\n\t\t\t\t\t\t<b>Status</b>\r\n\t\t\t\t\t\t<InputPicker labelKey='label' valueKey='value' data={pickerData} style={{ width: '100%' }} onChange={(event)=> this.setState({status: event})}/>\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button loading={this.state.loading} onClick={() => this.handleSubmit()} appearance=\"primary\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={() => this.closeResult()} appearance=\"subtle\">\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</Content>\t\t\r\n\t\t );\r\n\t}\r\n\r\n\topenEdit = () => {\r\n\t\tconst action = this.props.action;\r\n\r\n\t\tthis.setState({ \r\n\t\t\tdescription: action.description, \r\n\t\t\tintent: action.intent, \r\n\t\t\teffort: action.effort, \r\n\t\t\tid: action._id, \r\n\t\t\tasset1: action.asset1,\r\n\t\t\tasset2: action.asset2,\r\n\t\t\tasset3: action.asset3,\r\n\t\t\tedit: true })\r\n\t}\r\n\r\n\thandleSubmit = async () => {\r\n\t\tthis.setState({loading: true}) \r\n\t\tconst action = {\r\n\t\t\teffort: this.state.effort,\r\n\t\t\tasset1: this.state.asset1,\r\n\t\t\tasset2: this.state.asset2,\r\n\t\t\tasset3: this.state.asset3,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tintent: this.state.intent,\r\n\t\t\tresult: this.state.result,\r\n\t\t\tdieResult: this.state.dieResult,\r\n\t\t\tstatus: this.state.status,\r\n\t\t\tid: this.props.action._id,\r\n\t\t\tplayerBoolean: this.state.edit\t\r\n\t\t}\r\n\t\t// console.log(action)\r\n\t\t// 1) make a new action\r\n\t\ttry{\r\n\t\t\tsocket.emit('updateActionRequest', action); // new Socket event\r\n\t\t\tthis.setState({asset1: '', asset2: '', asset3: '', effort: 0, description: '', intent: '', id: '', result: '', dieResult: 0, status: ''});\t\r\n\t\t\tthis.props.handleSelect(null)\r\n\t\t\tthis.closeEdit();\r\n\t\t\tthis.closeResult();\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tAlert.error(`Error: ${err.response.data}`, 6000)\r\n\t\t}\r\n\t\tthis.setState({loading: false});\r\n\t}\r\n\r\n\trenderAsset = (asset) => {\r\n\t\tif (asset) {\r\n\t\t\treturn (\r\n\t\t\t\t\t<Panel style={{backgroundColor: \"#272b34\"}} shaded header={asset} bordered ></Panel>\t\r\n\t\t\t)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t\t<Panel style={{backgroundColor: \"#0e1013\"}} shaded header='Empty Slot' bordered ></Panel>\t\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tcloseEdit = () => { \r\n\t\tthis.setState({edit: false}) \r\n\t};\r\n\r\n\tcloseResult = () => { \r\n\t\tthis.setState({resEdit: false}) \r\n\t};\r\n\r\n\tdeleteAction = async () => {\r\n\t\t//let {data} = await axios.delete(`${gameServer}api/actions/${this.props.action._id}`);\r\n\t\tsocket.emit('deleteActionRequest', {id: this.props.action._id}); // new Socket event\r\n\t\t\r\n\t\t/*const modifiedChar = {...this.props.myCharacter};\r\n\t\tmodifiedChar.effort += this.state.effort;\r\n\t\tthis.props.updateCharacter(modifiedChar);\r\n\t\t*/\r\n\t\tthis.props.handleSelect(null);\r\n\t}\r\n}\r\n\r\nconst slimText = {\r\n  fontSize: '0.966em',\r\n  color: '#97969B',\r\n\tfontWeight: '300',\r\n\twhiteSpace: 'nowrap',\r\n\ttextAlign: \"center\"\r\n};\r\n\r\nconst pickerData = [\r\n\t{\r\n\t\tlabel: 'Draft',\r\n\t\tvalue: 'draft'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Awaiting Resolution',\r\n\t\tvalue: 'awaiting'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Ready for Publishing',\r\n\t\tvalue: 'ready'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Published',\r\n\t\tvalue: 'published'\r\n\t}\r\n]\r\n \r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tgamestate: state.gamestate,\r\n\tactions: state.actions.list,\r\n  myCharacter: state.auth.user ? getMyCharacter(state): undefined\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\t// handleLogin: (data) => dispatch(loginUser(data))\r\n\tdeleteAction: (data) => dispatch(actionDeleted(data)),\r\n\tupdateCharacter: (data) => dispatch(characterUpdated(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedAction);","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ActionList.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyCharacter.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\AddAsset.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyMemory.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\ControlTerminal.jsx",["156","157"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\Registration.jsx",["158"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { Content, Container, Sidebar, PanelGroup, Panel, Input, FlexboxGrid, List, Alert, SelectPicker, Footer, Button } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\n\r\nclass Registration extends Component {\r\n\tstate = { \r\n\t\tusers: [],\r\n\t\tcharacters: [],\r\n\t\tfiltered: [],\r\n\t\tslected: null,\r\n\t\ttarget: null\r\n\t }\r\n\r\n\t componentDidMount = async () => {\r\n\t\ttry{\r\n\t\t\tconst existingUsernames = [];\r\n\t\t\tfor (const character of this.props.characters) {\r\n\t\t\t\tif (!existingUsernames.some(el => el === character.username )) existingUsernames.push(character.username);\r\n\t\t\t}\r\n\t\t\tconst {data} = await axios.get(`https://nexus-central-server.herokuapp.com/api/users/`);\r\n\r\n\t\t\tconst filteredUsers = [];\r\n\t\t\tfor (const user of data) {\r\n\t\t\t\tif (!existingUsernames.some(el => el === user.username )) filteredUsers.push(user);\r\n\t\t\t}\r\n\t\t//\tAlert.success('Asset Successfully Deleted');\r\n\t\t\tthis.setState({ users: filteredUsers, filtered: filteredUsers});\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data}`, 5000);\r\n\t\t}\t\r\n\t }\r\n\r\n\t listStyle (item) {\r\n\t\tif (item === this.state.selected) {\r\n\t\t\treturn ({cursor: 'pointer', backgroundColor: \"#212429\"})\r\n\t\t}\r\n\t\telse return ({cursor: 'pointer'})\r\n\t}\r\n\r\n\r\n\trender() { \r\n\t\treturn ( \r\n\t\t\t<Container>\r\n\t\t\t\t<Sidebar style={{backgroundColor: \"black\"}}>\r\n\t\t\t\t\t<PanelGroup>\t\t\t\t\t\r\n\t\t\t\t\t\t<Panel style={{ backgroundColor: \"#000101\"}}>\r\n\t\t\t\t\t\t\t<Input onChange={(value)=> this.filter(value)} placeholder=\"Search\"></Input>\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t<Panel bodyFill style={{height: 'calc(100vh - 130px)', borderRadius: '0px', overflow: 'auto', scrollbarWidth: 'none', borderRight: '1px solid rgba(255, 255, 255, 0.12)' }}>\t\t\r\n\t\t\t\t\t\t\t<List>\t\t\t\r\n\t\t\t\t\t\t\t\t\t{this.state.filtered.sort((a, b) => { // sort the catagories alphabetically \r\n\t\t\t\t\t\t\t\t\t\tif(a.name.first < b.name.first) { return -1; }\r\n\t\t\t\t\t\t\t\t\t\tif(a.name.first > b.name.first) { return 1; }\r\n\t\t\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t\t\t}).map((user, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<List.Item key={index} index={index} onClick={() => this.setState({ selected: user })} style={this.listStyle(user)}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={16} style={{...styleCenter, flexDirection: 'column', alignItems: 'flex-start', overflow: 'hidden'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={titleStyle}>{user.name.first} {user.name.last}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={slimText}>{user.email}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</List>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Panel>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</PanelGroup>\r\n\t\t\t\t</Sidebar>\r\n\t\t\t\t{this.state.selected &&\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t<Panel style={{padding: \"0px\", textAlign: \"left\", backgroundColor: \"#15181e\"}}>\r\n\t\t\t\t\t\t\t<h3 style={{textAlign: \"center\"}}> {this.state.selected.name.first} {this.state.selected.name.last} </h3>\t\r\n\t\t\t\t\t\t\t<h5 style={{textAlign: \"center\"}}> {this.state.selected.email} </h5>\t\r\n\t\t\t\t\t\t\t<b>Username: {this.state.selected.username} </b>\r\n\t\t\t\t\t\t\t<SelectPicker placeholder=\"Select a Character\" onChange={(event) => this.setState({ target: event })} block groupBy='tag' valueKey='_id' labelKey='characterName' data={this.props.characters}/>\t\t\t\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t<Panel>\r\n\t\t\t\t\t\t\t<Button disabled={(!this.state.target)} onClick={()=> this.handleReg()} >Register this Player!</Button>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t</Content>\t\t\t\t\t\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t}\r\n\t\t\t</Container>\r\n\t\t );\r\n\t}\r\n\r\n\tfilter = (fil) => {\r\n\t\tconst filtered = this.state.users.filter(user => user.name.first.toLowerCase().includes(fil.toLowerCase()) ||\r\n\t\tuser.name.last.toLowerCase().includes(fil.toLowerCase()) ||\r\n\t\tuser.email.toLowerCase().includes(fil.toLowerCase()));\r\n\t\tthis.setState({ filtered });\r\n\t}\r\n\r\n\thandleReg = async () => {\r\n\t\tconst data = {\r\n\t\t\tcharacter: this.state.target,\r\n\t\t\tusername: this.state.selected.username,\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/characters/register`, { data });\r\n\t\t\tAlert.success('User successfully given their character');\r\n\t\t\tthis.setState({ selected: null, target: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n      Alert.error(`Error: ${err}`, 5000);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nconst styleCenter = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  height: '60px'\r\n};\r\n\r\nconst titleStyle = {\r\n  whiteSpace: 'nowrap',\r\n  fontWeight: 500,\r\n\tpaddingLeft: 2\r\n};\r\n\r\nconst slimText = {\r\n  fontSize: '0.966em',\r\n  color: '#97969B',\r\n  fontWeight: 'lighter',\r\n\tpaddingBottom: 5,\r\n\tpaddingLeft: 2\r\n};\r\n\r\nexport default Registration;",["159","160"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedProject.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\store.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\configureStore.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\reducer.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\api.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\toast.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\playerActions.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\characters.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\auth.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\api.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\gamestate.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\socket.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Login.jsx",["161","162"],"import React, { useEffect } from 'react'; // React imports\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, ControlLabel, Form, FormControl, FormGroup, Modal, Schema } from 'rsuite';\r\nimport { loadAssets } from '../redux/entities/assets';\r\nimport { authReceived, loginUser } from '../redux/entities/auth';\r\nimport { loadCharacters } from '../redux/entities/characters';\r\nimport { loadGamestate } from '../redux/entities/gamestate';\r\nimport { loadplayerActions } from '../redux/entities/playerActions';\r\nconst { StringType } = Schema.Types;\r\n\r\nconst Login = props => {\r\n\tlet { login, tokenLogin, loadAction, user } = props;\r\n    const [errors, setErrors] = React.useState({});\r\n    const [formValue, setFormValue] = React.useState({ email: '', password: '',});\r\n\r\n\tconst history = useHistory();\r\n\t\r\n\t// console.log('Mounting App...')\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tlet token = localStorage.getItem('token');\r\n\t\tif (token && login === false) {\r\n\t\t\ttokenLogin(token);\r\n\t\t} \r\n\t}, [login, tokenLogin])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (login) {\r\n\t\t\tloadAction(user);\r\n\t\t\thistory.push('/home');\r\n\t\t}\r\n\t}, [login, user, loadAction, history])\r\n\r\n\r\n\r\n    return ( \r\n\t\t<Modal backdrop=\"static\" show={true}>\r\n\t\t<Modal.Header>\r\n\t\t\t<Modal.Title>Login</Modal.Title>\r\n\t\t</Modal.Header>\r\n\t\t<Modal.Body>\r\n\t\t\t<Form model={model} fluid formValue={formValue} onChange={form => setFormValue(form)}>\r\n\t\t\t<FormGroup>\r\n\t\t\t\t\t<ControlLabel>Email / Username</ControlLabel>\r\n\t\t\t\t\t<FormControl errorMessage={props.error} errorPlacement='topEnd' name=\"email\" accepter={model.accepter}/>\r\n\t\t\t\t</FormGroup>\r\n\t\t\t\t<FormGroup>\r\n\t\t\t\t\t<ControlLabel>Password</ControlLabel>\r\n\t\t\t\t\t<FormControl errorMessage={props.error} errorPlacement='topEnd' name=\"password\" type=\"password\" />\r\n\t\t\t\t</FormGroup>\r\n\t\t\t</Form>\r\n\t\t</Modal.Body>\r\n\t\t<Modal.Footer>\r\n\t\t\t<Button loading={props.loading} onClick={() => {\r\n                props.handleLogin({ user: formValue.email, password: formValue.password })\r\n                }} appearance=\"primary\">\r\n\t\t\t\tSubmit\r\n\t\t\t</Button>\r\n\t\t</Modal.Footer>\r\n\t</Modal> \r\n\t);\r\n}\r\n\r\nconst model = Schema.Model({\r\n    email: StringType()\r\n    .isRequired('This field is required.')\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tauth: state.auth,\r\n\tlogin: state.auth.login,\r\n\terror: state.auth.error,\r\n\tuser: state.auth.user,\r\n\tloading: state.auth.loading,\r\n\tactionsLast: state.actions.lastFetch,\r\n\tassetsLast: state.assets.lastFetch,\r\n\tcharactersLast: state.characters.lastFetch,\r\n\tgamestateLast: state.gamestate.lastFetch,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\thandleLogin: (data) => dispatch(loginUser(data)),\r\n\ttokenLogin: (data) => dispatch(authReceived(data)),\r\n\tloadChar: (data) => dispatch(loadCharacters()),\r\n\tloadAction: (data) => dispatch(loadplayerActions(data)),\r\n\tloadAssets: (data) => dispatch(loadAssets()),\r\n\tloadGamestate: (data) => dispatch(loadGamestate())\r\n\t// updateUser: (user) => dispatch(updateUser({ user }))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\assets.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\notFound.jsx",["163"],"import React, { useEffect } from 'react';\r\nimport { Button, Content, Header } from 'rsuite';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  const [seconds, setSeconds] = React.useState(25);\r\n  const [startBool, setStart] = React.useState(false);\r\n\tconst history = useHistory()\r\n\r\n  const start = () => {\r\n    setStart(startBool => startBool = true);\r\n    const audio = new Audio('/fanfare.mp3');\r\n    audio.loop = false;\r\n    audio.play();  \r\n\r\n    const interval = setInterval(() => {\r\n      if (seconds > 1300) {\r\n        clearInterval(interval);\r\n      }\r\n      else \r\n        setSeconds(seconds => seconds + 2);\r\n    }, 50);\r\n    return () => clearInterval(interval);\r\n  }\r\n\r\n  \r\n  return ( \r\n\t\t<React.Fragment>\r\n\r\n      {!startBool && <Header style={{position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n        <Button appearance={'ghost'} onClick={()=> start()}>Click Me</Button>\r\n      </Header>}\r\n      {startBool && <Content style={{position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" width={seconds > 1050 ? 1050: seconds} viewBox=\"0 0 1211 495\">\r\n          <defs>\r\n         </defs>\r\n         <text transform=\"translate(605 487) scale(11.91)\" style={{fontSize:' 60px'}}><tspan x=\"0\" style={{ fontSize:' 60px', fill: '#fff', textAnchor: 'middle', fontFamily: \"Franklin Gothic Medium\" }}>404</tspan></text>\r\n       </svg>\r\n       {seconds >= 1100 && <div style={{ fontSize: '34px', fontWeight: '500',\tcolor: '#fff', lineHeight: '1.4',\tmargin: '0'}}>Looks like something went wrong.</div>}\r\n       {seconds >= 1200 && <Button color='red' size='lg' onClick={()=> history.push('/')} >Take me back!</Button>}\r\n       {seconds >= 1300 && <p>Also I really hope you had audio on...</p> }\r\n      </Content>}\r\n    </React.Fragment>\r\n\t)\r\n}\r\n \r\nexport default NotFound;","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\loading.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\initUpdate.js",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":15,"column":9,"nodeType":"170","messageId":"171","endLine":15,"endColumn":17},{"ruleId":"168","severity":1,"message":"172","line":1,"column":8,"nodeType":"170","messageId":"171","endLine":1,"endColumn":13},{"ruleId":"168","severity":1,"message":"173","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":20},{"ruleId":"168","severity":1,"message":"172","line":1,"column":8,"nodeType":"170","messageId":"171","endLine":1,"endColumn":13},{"ruleId":"168","severity":1,"message":"173","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":20},{"ruleId":"168","severity":1,"message":"174","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"175","line":360,"column":9,"nodeType":"170","messageId":"171","endLine":360,"endColumn":17},{"ruleId":"168","severity":1,"message":"176","line":3,"column":105,"nodeType":"170","messageId":"171","endLine":3,"endColumn":111},{"ruleId":"164","replacedBy":"177"},{"ruleId":"166","replacedBy":"178"},{"ruleId":"168","severity":1,"message":"179","line":14,"column":12,"nodeType":"170","messageId":"171","endLine":14,"endColumn":18},{"ruleId":"168","severity":1,"message":"180","line":14,"column":20,"nodeType":"170","messageId":"171","endLine":14,"endColumn":29},{"ruleId":"168","severity":1,"message":"181","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":26},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'interval' is assigned a value but never used.","Identifier","unusedVar","'axios' is defined but never used.","'gameServer' is defined but never used.","'socket' is defined but never used.","'filtered' is assigned a value but never used.","'Footer' is defined but never used.",["182"],["183"],"'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]