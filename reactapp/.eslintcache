[{"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\index.js":"1","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\reportWebVitals.js":"2","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\App.js":"3","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\navigationBar.jsx":"4","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\homepage.jsx":"5","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\myCharacter.jsx":"6","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\control.jsx":"7","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\OtherCharacters.jsx":"8","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Actions.jsx":"9","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\config.js":"10","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\NewAction.jsx":"11","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedAction.jsx":"12","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ActionList.jsx":"13","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyCharacter.jsx":"14","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\AddAsset.jsx":"15","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyMemory.jsx":"16","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\ControlTerminal.jsx":"17","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\Registration.jsx":"18","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedProject.jsx":"19","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\store.js":"20","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\configureStore.js":"21","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\loadState.js":"22","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\reducer.js":"23","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\api.js":"24","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\toast.js":"25","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\playerActions.js":"26","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\characters.js":"27","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\auth.js":"28","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\api.js":"29","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\gamestate.js":"30","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\socket.js":"31","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Login.jsx":"32","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\assets.js":"33","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\notFound.jsx":"34","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\loading.jsx":"35","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\initUpdate.js":"36"},{"size":694,"mtime":1612519622583,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":2877,"mtime":1614254424873,"results":"40","hashOfConfig":"38"},{"size":3107,"mtime":1613892114188,"results":"41","hashOfConfig":"38"},{"size":2570,"mtime":1614382356548,"results":"42","hashOfConfig":"38"},{"size":13748,"mtime":1613783735035,"results":"43","hashOfConfig":"38"},{"size":5556,"mtime":1614160515143,"results":"44","hashOfConfig":"38"},{"size":11258,"mtime":1614159424213,"results":"45","hashOfConfig":"38"},{"size":4093,"mtime":1613894805210,"results":"46","hashOfConfig":"38"},{"size":204,"mtime":1610142436997,"results":"47","hashOfConfig":"38"},{"size":5436,"mtime":1613783735035,"results":"48","hashOfConfig":"38"},{"size":12849,"mtime":1614381586370,"results":"49","hashOfConfig":"38"},{"size":2756,"mtime":1612766801095,"results":"50","hashOfConfig":"38"},{"size":5501,"mtime":1614159714932,"results":"51","hashOfConfig":"38"},{"size":3347,"mtime":1613783735035,"results":"52","hashOfConfig":"38"},{"size":5785,"mtime":1612746931439,"results":"53","hashOfConfig":"38"},{"size":13781,"mtime":1614160272602,"results":"54","hashOfConfig":"38"},{"size":4704,"mtime":1612687379751,"results":"55","hashOfConfig":"38"},{"size":6015,"mtime":1613783735035,"results":"56","hashOfConfig":"38"},{"size":151,"mtime":1613894077524,"results":"57","hashOfConfig":"38"},{"size":509,"mtime":1612428550891,"results":"58","hashOfConfig":"38"},{"size":505,"mtime":1613894075724,"results":"59","hashOfConfig":"38"},{"size":474,"mtime":1612579400452,"results":"60","hashOfConfig":"38"},{"size":1018,"mtime":1613895448661,"results":"61","hashOfConfig":"38"},{"size":183,"mtime":1612428550980,"results":"62","hashOfConfig":"38"},{"size":3438,"mtime":1614382470966,"results":"63","hashOfConfig":"38"},{"size":2359,"mtime":1614381962786,"results":"64","hashOfConfig":"38"},{"size":2683,"mtime":1613943616264,"results":"65","hashOfConfig":"38"},{"size":238,"mtime":1612428550886,"results":"66","hashOfConfig":"38"},{"size":2037,"mtime":1614381912241,"results":"67","hashOfConfig":"38"},{"size":150,"mtime":1613943745302,"results":"68","hashOfConfig":"38"},{"size":3193,"mtime":1613945593923,"results":"69","hashOfConfig":"38"},{"size":2533,"mtime":1614381962786,"results":"70","hashOfConfig":"38"},{"size":1976,"mtime":1614297019439,"results":"71","hashOfConfig":"38"},{"size":11247,"mtime":1614382723606,"results":"72","hashOfConfig":"38"},{"size":791,"mtime":1613943893061,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"13pxyo7",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\index.js",[],["153","154"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\reportWebVitals.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\App.js",["155"],"import React, { useEffect } from 'react'; // React imports\r\nimport { connect } from \"react-redux\";\r\nimport { Header } from 'rsuite';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport 'rsuite/dist/styles/rsuite-dark.css'; // Dark theme for rsuite components\r\n// import 'bootstrap/dist/css/bootstrap.css'; //only used for global nav (black bar)\r\n\r\nimport './App.css';\r\nimport Actions from './components/Actions';\r\nimport Control from './components/navigation/control';\r\nimport HomePage from './components/navigation/homepage';\r\nimport MyCharacter from './components/navigation/myCharacter';\r\nimport NavigationBar from './components/navigation/navigationBar';\r\nimport OtherCharacters from './components/navigation/OtherCharacters';\r\nimport ControlTerminal from './components/navigation/ControlTerminal';\r\n// import Registration from './components/navigation/Registration';\r\n\r\nimport Login from './components/Login';\r\nimport NotFound from './components/notFound';\r\nimport initUpdates from './redux/initUpdate';\r\n\r\n// React App Component\r\ninitUpdates()\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"App\" style={props.loading ? loading : done}>\r\n      {props.login && props.characters.length > 0 && props.actions.length > 0  && !props.loading && <Header>\r\n        <NavigationBar/>\r\n      </Header> }\r\n      <Switch>\r\n        <Route exact path='/login' render={(props) => (\r\n          <Login {...props} />\r\n        )} />\r\n        <Route exact path='/home' render={(props) => (\r\n          <HomePage {...props} /> \r\n        )} />\r\n        <Route exact path='/character' render={(props) => (\r\n          <MyCharacter {...props} />\r\n        )}/>\r\n        <Route exact path='/controllers' render={(props) => (\r\n          <Control {...props} />\r\n        )} />\r\n        <Route exact path='/others' render={(props) => (\r\n          <OtherCharacters {...props} />\r\n        )} />\r\n        <Route exact path='/actions' render={(props) => (\r\n          <Actions {...props} />\r\n        )} />\r\n        <Route exact path='/control' render={(props) => (\r\n          <ControlTerminal {...props} />\r\n        )} />\r\n        <Route exact path='/404' render={(props) => (\r\n          <NotFound {...props} />\r\n        )} />\r\n        <Redirect from=\"/\" exact to=\"login\" />\r\n        <Redirect to=\"/404\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst loading = {\r\n  position: 'fixed', backgroundColor: '#000000', top: 0, bottom: 0, width: '100%',\r\n};\r\n\r\nconst done = {\r\n  position: 'fixed', top: 0, bottom: 0, width: '100%',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n  actions: state.actions.list,\r\n\tloading: state.auth.loading,\r\n\terror: state.auth.error,\r\n  login: state.auth.login,\r\n  characters: state.characters.list,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\navigationBar.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\homepage.jsx",["156","157"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\myCharacter.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\control.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\OtherCharacters.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Actions.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\config.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\NewAction.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedAction.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ActionList.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyCharacter.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\AddAsset.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\ModifyMemory.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\ControlTerminal.jsx",["158"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { Alert, ButtonGroup, Content, InputNumber, InputPicker, Divider, Placeholder, Panel, Button, Icon, Modal, Form, FormGroup, FormControl, ControlLabel, FlexboxGrid, SelectPicker, TagPicker, DatePicker, Loader } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ControlTerminal extends Component {\r\n\tstate = { \r\n\t\tgsModal: false,\r\n\t\twarningModal: false,\r\n\t\twarning2Modal: false,\r\n\t\tassModal: false,\r\n\t\tprojectModal: false,\r\n\t\tformValue: {\r\n\t\t\tround: null,\r\n\t\t\tstatus: '',\r\n\t\t},\r\n\t\tendTime: null,\r\n\t\tprojName: '',\r\n\t\tprojDescription: '',\r\n\t\tprogress: 0,\r\n\t\tplayers: [],\r\n\t\timage: '',\r\n\t\r\n\t\tdrafts: 0,\r\n\t\tawaiting: 0,\r\n\t\tready: 0,\r\n\t\tassets: [],\r\n\t\tselected: null,\r\n\t\tname: '',\r\n\t\tdescription: '',\r\n\t\tuses: 0, \r\n\t\tloading: false\r\n\t }\r\n\r\n\tcomponentDidMount = async () => {\r\n\t\tconst formValue = {\r\n\t\t\tround: this.props.gamestate.round, \r\n\t\t\tstatus: this.props.gamestate.status,\r\n\t\t\tendTime: this.props.gamestate.endTime\r\n\t\t}\r\n\r\n\t\tlet drafts = 0;\r\n\t\tlet awaiting= 0;\r\n\t\tlet ready = 0;\r\n\t\tfor (const action of this.props.actions) {\r\n\t\t\tif (action.status.draft === true) drafts++;\r\n\t\t\telse if (action.status.ready === true) ready++;\r\n\t\t\telse if (action.status.draft === false && action.status.ready === false && action.status.published === false) awaiting++;\r\n\t\t}\r\n\t\tthis.setState({ formValue, drafts, awaiting, ready })\r\n\t}\r\n\r\n\tcomponentDidUpdate = async (prevProps) => {\r\n\t\tif (this.props.gamestate !== prevProps.gamestate || this.props.actions !== prevProps.actions) {\r\n\t\t\tconst formValue = {\r\n\t\t\t\tround: this.props.gamestate.round, \r\n\t\t\t\tstatus: this.props.gamestate.status\r\n\t\t\t}\r\n\t\t\tlet drafts = 0;\r\n\t\t\tlet awaiting= 0;\r\n\t\t\tlet ready = 0;\r\n\t\t\tfor (const action of this.props.actions) {\r\n\t\t\t\tif (action.status.draft === true && action.model !== \"Project\") drafts++;\r\n\t\t\t\telse if (action.status.ready === true) ready++;\r\n\t\t\t\telse if (action.status.draft === false && action.status.ready === false && action.status.published === false) awaiting++;\r\n\t\t\t}\r\n\t\t\tthis.setState({ formValue, drafts, awaiting, ready, endTime: this.props.gamestate.endTime })\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\trender() { \r\n\t\tif (!this.props.login) {\r\n\t\t\tthis.props.history.push('/');\r\n\t\t\treturn (<Loader inverse center content=\"doot...\" />)\r\n\t\t};\r\n\t\treturn ( \r\n\t\t\t<Content style={{style1}}>\r\n\t\t\t\t<Divider>Actions Status</Divider>\r\n\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Drafts'> {this.state.drafts} </Panel>\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Awaiting Resolution'> {this.state.awaiting} </Panel>\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Ready for Publishing'> {this.state.ready} </Panel>\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\t\t\t\t\t\r\n\t\t\t\t</FlexboxGrid>\r\n\r\n\t\t\t\t<Divider>Round Editing</Divider>\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\t<ButtonGroup >\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" onClick={() => this.setState({ warningModal: true })}>Close Actions</Button>\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" onClick={() => this.setState({ warning2Modal: true })}>Publish Resolutions</Button>\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" disabled={this.isControl()} onClick={() => this.setState({ gsModal: true })} >Edit Game State</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Divider>Asset Management</Divider>\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\t<ButtonGroup >\r\n\t\t\t\t\t\t<Button color='red' appearance=\"ghost\" onClick={() => this.setState({ assModal: true })}>Edit or Delete Asset/Trait</Button>\r\n\t\t\t\t\t\t<Button color='orange' appearance=\"ghost\" onClick={() => this.setState({ projectModal: true })}>New Project</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Divider>Scott's Message of the Day:</Divider>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>I'm a lumberjack and I'm ok.</h5>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Modal size='sm' show={this.state.gsModal} onHide={() => this.setState({ gsModal: false })} > \r\n\t\t\t\t\t<Form formValue={this.state.formValue} layout=\"center\" onChange={formValue => {this.setState({ formValue });}}>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>Game State </ControlLabel>\r\n\t\t\t\t\t\t\t<FormControl name=\"status\" data={pickerData} accepter={InputPicker} />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>Round</ControlLabel>\r\n\t\t\t\t\t\t\t<FormControl name=\"round\" cleanable={false} accepter={InputNumber} />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>End Time</ControlLabel>\r\n\t\t\t\t\t\t\t<DatePicker value={this.state.endTime} onChange={this.handleDate} format=\"YYYY-MM-DD HH\"></DatePicker>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t\t<Modal.Footer>\r\n        \t  <Button loading={this.state.loading} onClick={() => this.handleSubmit()} disabled={(this.state.formValue.status === null)} appearance=\"primary\">\r\n        \t    Submit\r\n        \t  </Button>\r\n        \t  <Button onClick={() => this.setState({ gsModal: false })} appearance=\"subtle\">\r\n        \t    Cancel\r\n         \t </Button>\r\n        </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\r\n\t\t\t\t<Modal backdrop='static' size='md' show={this.state.projectModal} onHide={() => this.setState({ projectModal: false })}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tName\t\t\r\n\t\t\t\t</p> \r\n\t\t\t\t\t<textarea value={this.state.projName} style={textStyle} onChange={(event)=> this.setState({ projName: event.target.value })}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDescription\t\t\r\n\t\t\t\t</p> \r\n\t\t\t\t<textarea rows='4' value={this.state.projDescription} style={textStyle} onChange={(event)=> this.setState({projDescription: event.target.value})}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tImage\r\n\t\t\t\t</p>\r\n\t\t\t\t<textarea value={this.state.image} style={textStyle} onChange={(event)=> this.setState({ image: event.target.value })}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tProgress\r\n\t\t\t\t</p>\r\n\t\t\t\t<InputNumber value={this.state.progress} onChange={(event)=> this.setState({progress: event})}></InputNumber>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPlayers\r\n\t\t\t\t</p>\r\n\t\t\t\t\t<TagPicker groupBy=\"tag\" data={this.props.characters} labelKey='characterName' valueKey='characterName' block onChange={(event)=> this.setState({ players: event })}></TagPicker>\r\n\t\t\t\t\t<Modal.Footer>\r\n        \t  <Button onClick={() => this.newProject()} appearance=\"primary\">\r\n        \t    Submit\r\n        \t  </Button>\r\n        \t  <Button onClick={() => this.setState({ projectModal: false })} appearance=\"subtle\">\r\n        \t    Cancel\r\n         \t </Button>\r\n        </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\r\n\t\t\t\t<Modal backdrop=\"static\" size='sm' show={this.state.warningModal} onHide={() => this.setState({ warningModal: false })}>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t{'  '}\r\n\t\t\t\t\t\t\tWaring! Are you sure you want to close the round? This will lock down all actions.\r\n\t\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t<Modal.Footer>\r\n            <Button onClick={() => this.closeDraft()} appearance=\"primary\">\r\n              I am Sure!\r\n            </Button>\r\n            <Button onClick={() => this.setState({ warningModal: false })} appearance=\"subtle\">\r\n              Nevermind\r\n            </Button>\r\n          </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t\r\n\t\t\t\t<Modal backdrop=\"static\" size='sm' show={this.state.warning2Modal} onHide={() => this.setState({ warning2Modal: false })}>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t{'  '}\r\n\t\t\t\t\t\t\tWaring! Are you sure you want to publish all actions? This will:\r\n\t\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tMake all actions that are \"Ready for Publishing\" to \"Published\"\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tRecall all Lent Assets to their owners\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tPush the round to it's next number\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t<Modal.Footer>\r\n            <Button onClick={() => this.publishActions()} appearance=\"primary\">\r\n              I am Sure!\r\n            </Button>\r\n            <Button onClick={() => this.setState({ warning2Modal: false })} appearance=\"subtle\">\r\n              Nevermind\r\n            </Button>\r\n          </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t\r\n\t\t\t\t<Modal size='sm' show={this.state.assModal} onHide={() => this.setState({ assModal: false })}>\r\n\t\t\t\t\t<SelectPicker block placeholder=\"Edit or Delete Asset/Trait\" onChange={(event) => this.handleChage(event)} data={this.props.assets.filter(el => el.model !== 'Wealth')} valueKey='_id' labelKey='name'></SelectPicker>\r\n\t\t\t\t\t\t{this.renderAss()}\r\n\t\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t\t{this.state.selected && \r\n\t\t\t\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t\t\t\t<Button loading={this.state.loading}  onClick={() => this.assetModify()} color=\"blue\">Edit</Button>\r\n\t\t\t\t\t\t\t\t<Button loading={this.state.loading}  onClick={() => this.handleDelete()} color=\"red\">Delete</Button>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</ButtonGroup>}\r\n\t\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t</Content>\r\n\t\t );\r\n\t}\r\n\r\n\thandleDate = (value) => {\r\n\t\tthis.setState({ endTime: value })\r\n\t}\r\n\r\n\thandleChage = (event) => {\r\n\t\tif (event) {\r\n\t\t\tconst selected = this.props.assets.find(el => el._id === event);\r\n\t\t\tthis.setState({ selected: event, name: selected.name, description: selected.description, uses: selected.uses })\t\t\t\r\n\t\t}\r\n\t\telse this.setState({ selected: '', name: '', description: '', uses: 0 })\t\t\t\r\n\t}\r\n\r\n\tassetModify = async () => {\r\n\t\tthis.setState({ loading: true });\r\n\t\tconst data = {\r\n\t\t\tid: this.state.selected,\r\n\t\t\tname: this.state.name,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tuses: this.state.uses\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/assets/modify`, { data });\r\n\t\t\tAlert.success('Asset Modification Submitted');\r\n\t\t\tthis.setState({ assModal: false, selected: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t\tthis.setState({ loading: false });\r\n\t}\r\n\r\n\trenderAss = () => {\r\n\t\tif (this.state.selected) {\r\n\t\t\treturn (\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\tName:\r\n\t\t\t\t\t<textarea value={this.state.name} style={textStyle} onChange={(event)=> this.setState({ name: event.target.value })}></textarea>\t\r\n\t\t\t\t\tDescription:\r\n\t\t\t\t\t<textarea rows='4' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\r\n\t\t\t\t\tUses: <InputNumber value={this.state.uses} onChange={(event)=> this.setState({uses: event})}></InputNumber>\r\n\t\t\t\t</Panel>\t\t\t\r\n\t\t\t)\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<Placeholder.Paragraph rows={5} >Awaiting Selection</Placeholder.Paragraph>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\thandleDelete = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.delete(`${gameServer}api/assets/${this.state.selected}`);\r\n\t\t\tAlert.success('Asset Successfully Deleted');\r\n\t\t\tthis.setState({ assModal: false, selected: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t}\r\n\r\n\thandleSubmit = async () => {\r\n\t\ttry{\r\n\t\t\tconst data = {\r\n\t\t\t\tround: this.state.formValue.round,\r\n\t\t\t\tstatus: this.state.formValue.status,\r\n\t\t\t\tendTime: this.state.endTime\r\n\t\t\t}\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/modify`, { data });\r\n\t\t\tAlert.success('Gamestate Modify Submitted');\r\n\t\t\tthis.setState({ gsModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t}\r\n\r\n\tcloseDraft = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/closeRound`);\r\n\t\t\tAlert.success('The Game is now in Resolution Phase');\r\n\t\t\tthis.setState({ warningModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tpublishActions = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/nextRound`);\r\n\t\t\tAlert.success('Actions Have been Published!');\r\n\t\t\tthis.setState({ warning2Modal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tnewProject = async () => {\r\n\t\tconst data = {\r\n\t\t\tdescription: this.state.projName,\r\n\t\t\tintent: this.state.projDescription,\r\n\t\t\teffort: 0,\r\n\t\t\tprogress: this.state.progress,\r\n\t\t\tmodel: \"Project\",\r\n\t\t\tplayers: this.state.players,\r\n\t\t\tcreator: this.props.playerCharacter,\r\n\t\t\tround: this.props.gamestate.round, \r\n\t\t\timage: this.state.image\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.post(`${gameServer}api/actions/project`, { data: data });\r\n\t\t\tAlert.success('Project Created');\r\n\t\t\tthis.setState({ projectModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tisControl () {\r\n\t\tif (this.props.user.roles.some(el => el === \"Control\")) return false;\r\n\t\telse return true;\r\n\t}\r\n\r\n\tfilterAssets () {\r\n\t\tconst filtered = this.props.assets.filter(el => el.modal !== 'Wealth')\r\n\t}\r\n\t\r\n}\r\n \r\nconst style1 = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n};\r\n\r\nconst pickerData = [\r\n\t{\r\n\t\tlabel: 'Active',\r\n\t\tvalue: 'Active'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Resolution',\r\n\t\tvalue: 'Resolution'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Down',\r\n\t\tvalue: 'Down'\r\n\t},\r\n]\r\n\r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tassets: state.assets.list,\r\n\tlogin: state.auth.login,\r\n\tgamestate: state.gamestate,\r\n\tcharacters: state.characters.list,\r\n\tactions: state.actions.list\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlTerminal);\r\n","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\Registration.jsx",["159"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { Content, Container, Sidebar, PanelGroup, Panel, Input, FlexboxGrid, List, Alert, SelectPicker, Footer, Button } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\n\r\nclass Registration extends Component {\r\n\tstate = { \r\n\t\tusers: [],\r\n\t\tcharacters: [],\r\n\t\tfiltered: [],\r\n\t\tslected: null,\r\n\t\ttarget: null\r\n\t }\r\n\r\n\t componentDidMount = async () => {\r\n\t\ttry{\r\n\t\t\tconst existingUsernames = [];\r\n\t\t\tfor (const character of this.props.characters) {\r\n\t\t\t\tif (!existingUsernames.some(el => el === character.username )) existingUsernames.push(character.username);\r\n\t\t\t}\r\n\t\t\tconst {data} = await axios.get(`https://nexus-central-server.herokuapp.com/api/users/`);\r\n\r\n\t\t\tconst filteredUsers = [];\r\n\t\t\tfor (const user of data) {\r\n\t\t\t\tif (!existingUsernames.some(el => el === user.username )) filteredUsers.push(user);\r\n\t\t\t}\r\n\t\t//\tAlert.success('Asset Successfully Deleted');\r\n\t\t\tthis.setState({ users: filteredUsers, filtered: filteredUsers});\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data}`, 5000);\r\n\t\t}\t\r\n\t }\r\n\r\n\t listStyle (item) {\r\n\t\tif (item === this.state.selected) {\r\n\t\t\treturn ({cursor: 'pointer', backgroundColor: \"#212429\"})\r\n\t\t}\r\n\t\telse return ({cursor: 'pointer'})\r\n\t}\r\n\r\n\r\n\trender() { \r\n\t\treturn ( \r\n\t\t\t<Container>\r\n\t\t\t\t<Sidebar style={{backgroundColor: \"black\"}}>\r\n\t\t\t\t\t<PanelGroup>\t\t\t\t\t\r\n\t\t\t\t\t\t<Panel style={{ backgroundColor: \"#000101\"}}>\r\n\t\t\t\t\t\t\t<Input onChange={(value)=> this.filter(value)} placeholder=\"Search\"></Input>\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t<Panel bodyFill style={{height: 'calc(100vh - 130px)', borderRadius: '0px', overflow: 'auto', scrollbarWidth: 'none', borderRight: '1px solid rgba(255, 255, 255, 0.12)' }}>\t\t\r\n\t\t\t\t\t\t\t<List>\t\t\t\r\n\t\t\t\t\t\t\t\t\t{this.state.filtered.sort((a, b) => { // sort the catagories alphabetically \r\n\t\t\t\t\t\t\t\t\t\tif(a.name.first < b.name.first) { return -1; }\r\n\t\t\t\t\t\t\t\t\t\tif(a.name.first > b.name.first) { return 1; }\r\n\t\t\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t\t\t}).map((user, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<List.Item key={index} index={index} onClick={() => this.setState({ selected: user })} style={this.listStyle(user)}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={16} style={{...styleCenter, flexDirection: 'column', alignItems: 'flex-start', overflow: 'hidden'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={titleStyle}>{user.name.first} {user.name.last}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<b style={slimText}>{user.email}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</List>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Panel>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</PanelGroup>\r\n\t\t\t\t</Sidebar>\r\n\t\t\t\t{this.state.selected &&\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t<Panel style={{padding: \"0px\", textAlign: \"left\", backgroundColor: \"#15181e\"}}>\r\n\t\t\t\t\t\t\t<h3 style={{textAlign: \"center\"}}> {this.state.selected.name.first} {this.state.selected.name.last} </h3>\t\r\n\t\t\t\t\t\t\t<h5 style={{textAlign: \"center\"}}> {this.state.selected.email} </h5>\t\r\n\t\t\t\t\t\t\t<b>Username: {this.state.selected.username} </b>\r\n\t\t\t\t\t\t\t<SelectPicker placeholder=\"Select a Character\" onChange={(event) => this.setState({ target: event })} block groupBy='tag' valueKey='_id' labelKey='characterName' data={this.props.characters}/>\t\t\t\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t<Panel>\r\n\t\t\t\t\t\t\t<Button disabled={(!this.state.target)} onClick={()=> this.handleReg()} >Register this Player!</Button>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t</Content>\t\t\t\t\t\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t}\r\n\t\t\t</Container>\r\n\t\t );\r\n\t}\r\n\r\n\tfilter = (fil) => {\r\n\t\tconst filtered = this.state.users.filter(user => user.name.first.toLowerCase().includes(fil.toLowerCase()) ||\r\n\t\tuser.name.last.toLowerCase().includes(fil.toLowerCase()) ||\r\n\t\tuser.email.toLowerCase().includes(fil.toLowerCase()));\r\n\t\tthis.setState({ filtered });\r\n\t}\r\n\r\n\thandleReg = async () => {\r\n\t\tconst data = {\r\n\t\t\tcharacter: this.state.target,\r\n\t\t\tusername: this.state.selected.username,\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/characters/register`, { data });\r\n\t\t\tAlert.success('User successfully given their character');\r\n\t\t\tthis.setState({ selected: null, target: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n      Alert.error(`Error: ${err}`, 5000);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nconst styleCenter = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  height: '60px'\r\n};\r\n\r\nconst titleStyle = {\r\n  whiteSpace: 'nowrap',\r\n  fontWeight: 500,\r\n\tpaddingLeft: 2\r\n};\r\n\r\nconst slimText = {\r\n  fontSize: '0.966em',\r\n  color: '#97969B',\r\n  fontWeight: 'lighter',\r\n\tpaddingBottom: 5,\r\n\tpaddingLeft: 2\r\n};\r\n\r\nexport default Registration;",["160","161"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\SelectedProject.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\store.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\configureStore.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\loadState.js",["162","163","164","165"],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\reducer.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\api.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\middleware\\toast.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\playerActions.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\characters.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\auth.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\api.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\gamestate.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\socket.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\Login.jsx",["166","167"],"import React, { useEffect } from 'react'; // React imports\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, ControlLabel, Form, FormControl, FormGroup, Modal, Schema } from 'rsuite';\r\nimport { loadAssets } from '../redux/entities/assets';\r\nimport { authReceived, loginUser } from '../redux/entities/auth';\r\nimport { loadCharacters } from '../redux/entities/characters';\r\nimport { loadGamestate } from '../redux/entities/gamestate';\r\nimport { loadplayerActions } from '../redux/entities/playerActions';\r\nconst { StringType } = Schema.Types;\r\n\r\nconst Login = props => {\r\n\tlet { login, tokenLogin } = props;\r\n    const [errors, setErrors] = React.useState({});\r\n    const [formValue, setFormValue] = React.useState({ email: '', password: '',});\r\n\tconst loadState = () => {\r\n\t\tif (!props.charactersLast) props.loadChar();\r\n\t\tif (!props.actionsLast) props.loadAction(props.user);\r\n\t\tif (!props.assetsLast) props.loadAssets();\r\n\t\tif (!props.gamestateLast) props.loadState();\r\n\t}\r\n\r\n\tconst history = useHistory();\r\n\t\r\n\tconsole.log('Mounting App...')\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tlet token = localStorage.getItem('token');\r\n\r\n\t\tif (token && login === false) {\r\n\t\t\ttokenLogin(token);\r\n\t\t} \r\n\t}, [login, tokenLogin])\r\n\r\n\tif (props.login) {\r\n\t\tloadState();\r\n\t\thistory.push('/home');\r\n\t}\r\n\r\n    return ( \r\n\t\t<Modal backdrop=\"static\" show={true}>\r\n\t\t<Modal.Header>\r\n\t\t\t<Modal.Title>Login</Modal.Title>\r\n\t\t</Modal.Header>\r\n\t\t<Modal.Body>\r\n\t\t\t<Form model={model} fluid formValue={formValue} onChange={form => setFormValue(form)}>\r\n\t\t\t<FormGroup>\r\n\t\t\t\t\t<ControlLabel>Email / Username</ControlLabel>\r\n\t\t\t\t\t<FormControl errorMessage={props.error} errorPlacement='topEnd' name=\"email\" accepter={model.accepter}/>\r\n\t\t\t\t</FormGroup>\r\n\t\t\t\t<FormGroup>\r\n\t\t\t\t\t<ControlLabel>Password</ControlLabel>\r\n\t\t\t\t\t<FormControl errorMessage={props.error} errorPlacement='topEnd' name=\"password\" type=\"password\" />\r\n\t\t\t\t</FormGroup>\r\n\t\t\t</Form>\r\n\t\t</Modal.Body>\r\n\t\t<Modal.Footer>\r\n\t\t\t<Button loading={props.loading} onClick={() => {\r\n                props.handleLogin({ user: formValue.email, password: formValue.password })\r\n                }} appearance=\"primary\">\r\n\t\t\t\tSubmit\r\n\t\t\t</Button>\r\n\t\t</Modal.Footer>\r\n\t</Modal> \r\n\t);\r\n}\r\n\r\nconst model = Schema.Model({\r\n    email: StringType()\r\n    .isRequired('This field is required.')\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tauth: state.auth,\r\n\tlogin: state.auth.login,\r\n\terror: state.auth.error,\r\n\tuser: state.auth.user,\r\n\tloading: state.auth.loading,\r\n\tactionsLast: state.actions.lastFetch,\r\n\tassetsLast: state.assets.lastFetch,\r\n\tcharactersLast: state.characters.lastFetch,\r\n\tgamestateLast: state.gamestate.lastFetch,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\thandleLogin: (data) => dispatch(loginUser(data)),\r\n\ttokenLogin: (data) => dispatch(authReceived(data)),\r\n\tloadChar: (data) => dispatch(loadCharacters()),\r\n\tloadAction: (data) => dispatch(loadplayerActions(data)),\r\n\tloadAssets: (data) => dispatch(loadAssets()),\r\n\tloadState: (data) => dispatch(loadGamestate())\r\n\t// updateUser: (user) => dispatch(updateUser({ user }))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\entities\\assets.js",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\notFound.jsx",["168"],"import React, { useEffect } from 'react';\r\nimport { Button, Content, Header } from 'rsuite';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  const [seconds, setSeconds] = React.useState(25);\r\n  const [startBool, setStart] = React.useState(false);\r\n\tconst history = useHistory()\r\n\r\n  const start = () => {\r\n    setStart(startBool => startBool = true);\r\n    const audio = new Audio('/fanfare.mp3');\r\n    audio.loop = false;\r\n    audio.play();  \r\n\r\n    const interval = setInterval(() => {\r\n      if (seconds > 1300) {\r\n        clearInterval(interval);\r\n      }\r\n      else \r\n        setSeconds(seconds => seconds + 2);\r\n    }, 50);\r\n    return () => clearInterval(interval);\r\n  }\r\n\r\n  \r\n  return ( \r\n\t\t<React.Fragment>\r\n\r\n      {!startBool && <Header style={{position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n        <Button appearance={'ghost'} onClick={()=> start()}>Click Me</Button>\r\n      </Header>}\r\n      {startBool && <Content style={{position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" width={seconds > 1050 ? 1050: seconds} viewBox=\"0 0 1211 495\">\r\n          <defs>\r\n         </defs>\r\n         <text transform=\"translate(605 487) scale(11.91)\" style={{fontSize:' 60px'}}><tspan x=\"0\" style={{ fontSize:' 60px', fill: '#fff', textAnchor: 'middle', fontFamily: \"Franklin Gothic Medium\" }}>404</tspan></text>\r\n       </svg>\r\n       {seconds >= 1100 && <div style={{ fontSize: '34px', fontWeight: '500',\tcolor: '#fff', lineHeight: '1.4',\tmargin: '0'}}>Looks like something went wrong.</div>}\r\n       {seconds >= 1200 && <Button color='red' size='lg' onClick={()=> history.push('/')} >Take me back!</Button>}\r\n       {seconds >= 1300 && <p>Also I really hope you had audio on...</p> }\r\n      </Content>}\r\n    </React.Fragment>\r\n\t)\r\n}\r\n \r\nexport default NotFound;","C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\components\\navigation\\loading.jsx",[],"C:\\Users\\Scott.000\\Documents\\GitHub\\afterlife-app\\reactapp\\src\\redux\\initUpdate.js",[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":26},{"ruleId":"173","severity":1,"message":"177","line":3,"column":73,"nodeType":"175","messageId":"176","endLine":3,"endColumn":84},{"ruleId":"173","severity":1,"message":"178","line":4,"column":10,"nodeType":"175","messageId":"176","endLine":4,"endColumn":24},{"ruleId":"173","severity":1,"message":"179","line":356,"column":9,"nodeType":"175","messageId":"176","endLine":356,"endColumn":17},{"ruleId":"173","severity":1,"message":"180","line":3,"column":105,"nodeType":"175","messageId":"176","endLine":3,"endColumn":111},{"ruleId":"169","replacedBy":"181"},{"ruleId":"171","replacedBy":"182"},{"ruleId":"173","severity":1,"message":"183","line":1,"column":10,"nodeType":"175","messageId":"176","endLine":1,"endColumn":24},{"ruleId":"173","severity":1,"message":"184","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":23},{"ruleId":"173","severity":1,"message":"185","line":3,"column":10,"nodeType":"175","messageId":"176","endLine":3,"endColumn":20},{"ruleId":"173","severity":1,"message":"186","line":4,"column":10,"nodeType":"175","messageId":"176","endLine":4,"endColumn":27},{"ruleId":"173","severity":1,"message":"187","line":14,"column":12,"nodeType":"175","messageId":"176","endLine":14,"endColumn":18},{"ruleId":"173","severity":1,"message":"188","line":14,"column":20,"nodeType":"175","messageId":"176","endLine":14,"endColumn":29},{"ruleId":"173","severity":1,"message":"174","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":26},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'FlexboxGrid' is defined but never used.","'getMyCharacter' is defined but never used.","'filtered' is assigned a value but never used.","'Footer' is defined but never used.",["189"],["190"],"'loadCharacters' is defined but never used.","'loadGamestate' is defined but never used.","'loadAssets' is defined but never used.","'loadplayerActions' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]